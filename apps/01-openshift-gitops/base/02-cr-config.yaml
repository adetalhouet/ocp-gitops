---
apiVersion: argoproj.io/v1alpha1
kind: ArgoCD
metadata:
  name: openshift-gitops
  namespace: openshift-gitops
spec:
  resourceExclusions: |
    - apiGroups:
      - tekton.dev
      clusters:
      - '*'
      kinds:
      - TaskRun
      - PipelineRun
  oidcConfig: |
    name: Keycloak
    issuer: https://keycloak-openshift-sso.apps.hub.rhtelco.io/auth/realms/openshift
    clientID: argocd 
    clientSecret: $oidc.keycloak.clientSecret 
    requestedScopes: ["openid", "profile", "email", "groups"] 
  server:
    route:
      enabled: true
  resourceCustomizations: |
    argoproj.io/Application:
      health.lua: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.health ~= nil then
            hs.status = obj.status.health.status
            if obj.status.health.message ~= nil then
              hs.message = obj.status.health.message
            end
          end
        end
        return hs
    platform.stackrox.io/Central:
      health.lua: |
        hs = {}
        if obj.status ~= nil and obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.status == "True" and condition.reason == "InstallSuccessful" then
                  hs.status = "Healthy"
                  hs.message = "Install Successful"
                  return hs
              end
            end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for Central to deploy."
        return hs
    route.openshift.io/Route:
      ignoreDifferences: |
        jsonPointers:
        - /status/ingress
      health.lua:
        health_status = {}
        if obj.status ~= nil then
          if obj.status.ingress ~= nil then
            numIngressRules = 0
            for _, ingressRules in pairs(obj.status.ingress) do
                numIngressRules = numIngressRules + 1
                numTrue = 0
                numFalse = 0
                if obj.status.ingress ~= nil then
                  for _, condition in pairs(ingressRules.conditions) do
                      if condition.type == "Admitted" and condition.status == "True" then
                          numTrue = numTrue + 1
                      elseif condition.type == "Admitted" and condition.status == "False" then
                          numFalse = numFalse + 1
                      end
                  end
                end
                health_status.status = 'Test'
            end
            if numTrue == numIngressRules then
              health_status.status = "Healthy"
              health_status.message = "Route is healthy"
              return health_status
            elseif numFalse > 0 then
              health_status.status = "Degraded"
              health_status.message = "Route is degraded"
              return health_status
            else
              health_status.status = "Progressing"
              health_status.message = "Route is still getting admitted"
              return health_status
            end
          end
        end
        health_status.status = "Progressing"
        health_status.message = "Route is still getting admitted"
        return health_status
    integreatly.org/GrafanaDataSource:
      ignoreDifferences: |
        jsonPointers:
        - /spec/datasources/0/secureJsonData/httpHeaderValue1
    PersistentVolumeClaim:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.phase ~= nil then
            if obj.status.phase == "Pending" then
              hs.status = "Healthy"
              hs.message = obj.status.phase
              return hs
            end
            if obj.status.phase == "Bound" then
              hs.status = "Healthy"
              hs.message = obj.status.phase
              return hs
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for certificate"
        return hs
    Job:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.active ~= nil then
            if obj.status.active == "1" then
              hs.status = "Progressing"
              hs.message = obj.status.active .. " active job(s)."
              return hs
            end
          end
          if obj.status.succeeded ~= nil then
            if obj.status.succeeded == 1 then
              hs.status = "Healthy"
              hs.message = "Job completed successfully."
              return hs
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for Job to complete."
        return hs
    bitnami.com/SealedSecret:
      health.lua: |
        health_status={}
        if obj.status ~= nil then
            if obj.status.conditions ~= nil then
                for i, condition in ipairs(obj.status.conditions) do
                    if condition.type == "Synced" and condition.status == "False" then
                        health_status.status = "Degraded"
                        health_status.message = condition.message
                        return health_status
                    end
                    if condition.type == "Synced" and condition.status == "True" then
                        health_status.status = "Healthy"
                        health_status.message = condition.message
                        return health_status
                    end
                end
            end
        end
        health_status.status = "Progressing"
        health_status.message = "Waiting for Sealed Secret to be decrypted"
        return health_status