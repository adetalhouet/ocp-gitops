---
apiVersion: argoproj.io/v1alpha1
kind: ArgoCD
metadata:
  name: openshift-gitops
  namespace: openshift-gitops
spec:
  resourceExclusions: |
    - apiGroups:
      - tekton.dev
      clusters:
      - '*'
      kinds:
      - TaskRun
      - PipelineRun
  initialSSHKnownHosts:
    keys: |
      adetalhouet-t640-1 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCXBlG+5FRGFwLAxhk88Nce10VwN7W0N9+aBKzoXWx/Y3h5eJmwdy3apo+kBxEbf+GW01u9EFSV3MZR+uaufvT0t0fF1zyFV2pB+HNVBPoOKs7ZGaqNzWi4uR0REBH+rIeoY7eR528kSbxHZNWjzxB6jc/PCmF7gM/MWnNFieZKLBwoLpC3rOEorF6Q5GRj0c7EOYn0sdK149i1BUhJFWEJfxXSS5pkArIa4TCW2hgO06TN41UpCPa17KDG+rxrrgs0i9J//RTke/w4PnddlY0ETASZXgNbDOJwldTGlmQTjzrjrBMgzf950xLnHiB2qX7SgZL2xrC4pO3i2RZezeIPujO3RAQjP+LAkUgG41Ui0d8v2dkZ53/OSfTXx3GB2eIUTGLVK2iK3uKzKys178dwuSvFON60YPi/n/TX8va+XaJzc4JImFNFQW4wF+RlAc3v1hNGOKQhGODtaDZ7oU0BDd4ddXe8ownN7W0LSWufxyJ9x8jH+DiUAI1jDHvhtH0=
  applicationSet:
    resources:
      limits:
        cpu: "4"
        memory: 2Gi
      requests:
        cpu: 250m
        memory: 512Mi
  controller:
    env:
      - name: ARGOCD_K8S_CLIENT_BURST
        value: '500'
      - name: ARGOCD_K8S_CLIENT_QPS
        value: '500'
    resources:
      limits:
        cpu: "4"
        memory: 4Gi
      requests:
        cpu: 250m
        memory: 1Gi
  rbac:
    policy: |
      g, system:cluster-admins, role:admin
      g, ArgoCDAdmins, role:admin
    scopes: '[groups]'
  dex:
    openShiftOAuth: true
  server:
    route:
      enabled: true
  resourceCustomizations: |
    argoproj.io/Application:
      health.lua: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.health ~= nil then
            hs.status = obj.status.health.status
            if obj.status.health.message ~= nil then
              hs.message = obj.status.health.message
            end
          end
        end
        return hs
    platform.stackrox.io/Central:
      health.lua: |
        hs = {}
        if obj.status ~= nil and obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.status == "True" and (condition.reason == "InstallSuccessful" or condition.reason == "UpgradeSuccessful") then
                  hs.status = "Healthy"
                  hs.message = "Install Successful"
                  return hs
              end
            end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for Central to deploy."
        return hs
    route.openshift.io/Route:
      ignoreDifferences: |
        jsonPointers:
        - /status/ingress
      health.lua:
        health_status = {}
        if obj.status ~= nil then
          if obj.status.ingress ~= nil then
            numIngressRules = 0
            for _, ingressRules in pairs(obj.status.ingress) do
                numIngressRules = numIngressRules + 1
                numTrue = 0
                numFalse = 0
                if obj.status.ingress ~= nil then
                  for _, condition in pairs(ingressRules.conditions) do
                      if condition.type == "Admitted" and condition.status == "True" then
                          numTrue = numTrue + 1
                      elseif condition.type == "Admitted" and condition.status == "False" then
                          numFalse = numFalse + 1
                      end
                  end
                end
                health_status.status = 'Test'
            end
            if numTrue == numIngressRules then
              health_status.status = "Healthy"
              health_status.message = "Route is healthy"
              return health_status
            elseif numFalse > 0 then
              health_status.status = "Degraded"
              health_status.message = "Route is degraded"
              return health_status
            else
              health_status.status = "Progressing"
              health_status.message = "Route is still getting admitted"
              return health_status
            end
          end
        end
        health_status.status = "Progressing"
        health_status.message = "Route is still getting admitted"
        return health_status
    integreatly.org/GrafanaDataSource:
      ignoreDifferences: |
        jsonPointers:
        - /spec/datasources/0/secureJsonData/httpHeaderValue1
    PersistentVolumeClaim:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.phase ~= nil then
            if obj.status.phase == "Pending" then
              hs.status = "Healthy"
              hs.message = obj.status.phase
              return hs
            end
            if obj.status.phase == "Bound" then
              hs.status = "Healthy"
              hs.message = obj.status.phase
              return hs
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for certificate"
        return hs
    Job:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.active ~= nil then
            if obj.status.active == "1" then
              hs.status = "Progressing"
              hs.message = obj.status.active .. " active job(s)."
              return hs
            end
          end
          if obj.status.succeeded ~= nil then
            if obj.status.succeeded == 1 then
              hs.status = "Healthy"
              hs.message = "Job completed successfully."
              return hs
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for Job to complete."
        return hs
    bitnami.com/SealedSecret:
      health.lua: |
        health_status={}
        if obj.status ~= nil then
            if obj.status.conditions ~= nil then
                for i, condition in ipairs(obj.status.conditions) do
                    if condition.type == "Synced" and condition.status == "False" then
                        health_status.status = "Degraded"
                        health_status.message = condition.message
                        return health_status
                    end
                    if condition.type == "Synced" and condition.status == "True" then
                        health_status.status = "Healthy"
                        health_status.message = condition.message
                        return health_status
                    end
                end
            end
        end
        health_status.status = "Progressing"
        health_status.message = "Waiting for Sealed Secret to be decrypted"
        return health_status
    cluster.open-cluster-management.io/ClusterCurator:
      ignoreDifferences: |
        jsonPointers:
        - /
    nmstate.io/NodeNetworkConfigurationPolicy:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Degraded" and condition.status == "False" then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              end
              if condition.type == "Available" and condition.status == "False" then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              end
              if condition.type == "Available" and condition.status == "True" and condition.reason == "SuccessfullyConfigured" then
                hs.status = "Healthy"
                hs.message = condition.message
                return hs
              end
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for NodeNetworkConfigurationPolicy"
        return hs
